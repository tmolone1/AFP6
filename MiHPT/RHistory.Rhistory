proj4string = CRS("+init=EPSG:26767")) # georgia state plane west NAD27
# identify locations with 20 feet of each other, generally wells screened at different levels, and force the code to adjust coordinates until they plot right)
d <- gDistance(scrns_df, byid=T)
min.d <- apply(d, 1, function(x) order(x, decreasing=F)[2])
newdata <- cbind(scrns_df, scrns_df[min.d,], apply(d, 1, function(x) sort(x, decreasing=F)[2]))
colnames(newdata@data)[ncol(newdata)]<-"distance"
pairs<-newdata@data[,c("LOCID","LOCID.1","distance")]
choose<-pairs[pairs$distance<0.5,c(1,2)]
picks<-vector(mode="list", length=nrow(choose))
num<-as_tibble(seq(1:4))
num$list <- list(c(1,2),c(2,2),c(1,3),c(2,3))
k<-min(newdata$distance)
while (k<0.5) {
for (i in seq(1,nrow(choose))) {
pick<-scrns[scrns_df$LOCID %in% choose[i,],]
j<-sample(1:4,1)
pick[num$list[[j]][1],num$list[[j]][2]]<-pick[num$list[[j]][1],num$list[[j]][2]]+0.5
scrns[scrns_df$LOCID %in% choose[i,],]<-pick
}
scrns_df<- SpatialPointsDataFrame(scrns[,c("ECOORD","NCOORD")],
data= scrns,
proj4string = CRS("+init=EPSG:26767")) # georgia state plane west NAD27
d <- gDistance(scrns_df, byid=T)
min.d <- apply(d, 1, function(x) order(x, decreasing=F)[2])
newdata <- cbind(scrns_df, scrns_df[min.d,], apply(d, 1, function(x) sort(x, decreasing=F)[2]))
colnames(newdata@data)[ncol(newdata)]<-"distance"
k<-min(newdata$distance)
}
scrns_df$LOCID[which(duplicated(scrns_df$LOCID))]<-paste(scrns_df$LOCID[which(duplicated(scrns_df$LOCID))],"A")
# setup a grid for interpolations
grd <- as.data.frame(spsample(scrns_df[scrns_df$ECOORD>389252.9 & scrns_df$ECOORD<392685 & scrns_df$NCOORD>1429204.3 & scrns_df$NCOORD<1432304,], "regular", n=50000))
names(grd)       <- c("X", "Y")
coordinates(grd) <- c("X", "Y")
gridded(grd)     <- TRUE  # Create SpatialPixel object
fullgrid(grd)    <- TRUE  # Create SpatialGrid object
# Add scrns's projection information to the empty grid
proj4string(grd) <- proj4string(scrns_df)
plot(grd)
points(scrns_df)
df<-as_tibble(scrns_df[!is.na(over(scrns_df, grd)),])
isco<-read_delim("ISCO.txt", delim=" ")
isco<-merge(isco, data %>% filter(`Well Identification` %in% unique(isco$WellID)) %>% select(c(`Well Identification`,Northing,Easting)), by=1)
isco<-isco %>% mutate(screentop=str_split(isco$ScreenedInterval,"-",simplify=TRUE)[,1], screenbot=str_split(isco$ScreenedInterval,"-",simplify=TRUE)[,2])
# locs_complete<-readOGR("locs_complete.shp")
# coords<-tibble(locs_complete$LOCID,locs_complete@coords[,1],locs_complete@coords[,2])
# coords<-coords[coords[,2]>0,]
# nad83<-coords[coords[,2]>500000,]
# nad27<-coords[coords[,2]<500000,]
# View(coords)
# spdf1<- SpatialPointsDataFrame(coords[,c(2,3)],
#                                   data=coords,
#                                   proj4string = CRS("+init=EPSG:26767")) # georgia state plane west NAD27
# plot(spdf1)
# write output
write_csv(tbl, "all_locations.csv")
write_csv(scrns, "wellscreens.csv")
write_csv(df, "collar.csv")
save(scrns, file = 'scrns.Rda')
save(df, file='scrns_select.Rda')
writeOGR(spdf, dsn = getwd(), layer = "wellscreens", driver = "ESRI Shapefile", overwrite_layer=TRUE)
write_csv(isco, "isco.csv")
View(df)
View(df)
# this code processes UVOST data (%RE and K from hydraulic profiling), calculating means of the raw data over specified depth intervals (0.5 feet)
# the processed data is written to a csv which can be readily brought into a Leapfrog Hydro 3D model
rm(list=ls())
library(readtext)
library(dplyr)
library(tidyverse)
library(stringi)
library(stringr)
library(readxl)
setwd("./MiHPT")
files<-list.files()
roundup<-function (x,mult) {
y = ceiling(x/mult)*mult
return(y)
}
for (file in files) {
df <- read_excel(file, col_types = rep("numeric", 12))
MiHPT_ID <- gsub(".xlsx", "", file)
df_short <- tibble(df[,c(1,12,4:7)]) # select the parameters of interest: depth, K, EC, ECD, PID, and FID
colnames(df_short)<-c("depth", "K", "EC", "ECD", "PID", "FID")
df_short <- df_short %>%  # with this data frame
mutate(ints=cut(as.numeric(.[[1]]), breaks=(0:roundup(max(df[,1]),1)))) %>% #subdivide the data by intervals and aggregate
group_by(ints) %>%
summarize(mean.K = mean(na.omit(K)),
mean.EC = mean(na.omit(EC)),
mean.ECD = mean(na.omit(ECD)),
mean.PID = mean(na.omit(PID)),
mean.FID = mean(na.omit(FID)),
max.K = max(na.omit(K)),
max.EC = max(na.omit(EC)),
max.ECD = max(na.omit(ECD)),
max.PID = max(na.omit(PID)),
max.FID = max(na.omit(FID)))  # calculate stats for each depth interval
df_short$MiHPT_ID<- MiHPT_ID  # assign the ID
df_short$max.depth=max(df$`Depth (ft)`)
if(exists("df_ALL")) df_ALL<- df_ALL else df_ALL<- df_short[FALSE,]
df_ALL<-rbind(df_short[FALSE,],df_ALL,df_short)
}
#process the top and bottom depths of the intervals
uchar<-as.character(df_ALL$ints)
split<-stringi::stri_split_regex(uchar,",",simplify=TRUE)
top<-as.numeric(gsub("[^0-9\\.]", "", split[,1]))
bottom<-as.numeric(gsub("[^0-9\\.]", "", split[,2]))
df_ALL<-cbind(df_ALL,top,bottom)
df_ALL <- df_ALL %>% mutate(top = replace(top, top > 500, 0))
df_ALL$MiHPT_ID
roundup<-function (x,mult) {
y = ceiling(x/mult)*mult
return(y)
}
for (file in files) {
df <- read_excel(file, col_types = rep("numeric", 12))
MiHPT_ID <- gsub(".xlsx", "", file)
df_short <- tibble(df[,c(1,12,4:7)]) # select the parameters of interest: depth, K, EC, ECD, PID, and FID
colnames(df_short)<-c("depth", "K", "EC", "ECD", "PID", "FID")
df_short <- df_short %>%  # with this data frame
mutate(ints=cut(as.numeric(.[[1]]), breaks=(0:roundup(max(df[,1]),1)))) %>% #subdivide the data by intervals and aggregate
group_by(ints) %>%
summarize(mean.K = mean(na.omit(K)),
mean.EC = mean(na.omit(EC)),
mean.ECD = mean(na.omit(ECD)),
mean.PID = mean(na.omit(PID)),
mean.FID = mean(na.omit(FID)),
max.K = max(na.omit(K)),
max.EC = max(na.omit(EC)),
max.ECD = max(na.omit(ECD)),
max.PID = max(na.omit(PID)),
max.FID = max(na.omit(FID)))  # calculate stats for each depth interval
df_short$MiHPT_ID<- MiHPT_ID  # assign the ID
df_short$max.depth=max(df$`Depth (ft)`)
if(exists("df_ALL")) df_ALL<- df_ALL else df_ALL<- df_short[FALSE,]
df_ALL<-rbind(df_short[FALSE,],df_ALL,df_short)
}
files<-list.files()
roundup<-function (x,mult) {
y = ceiling(x/mult)*mult
return(y)
}
for (file in files) {
df <- read_excel(file, col_types = rep("numeric", 12))
MiHPT_ID <- gsub(".xlsx", "", file)
df_short <- tibble(df[,c(1,12,4:7)]) # select the parameters of interest: depth, K, EC, ECD, PID, and FID
colnames(df_short)<-c("depth", "K", "EC", "ECD", "PID", "FID")
df_short <- df_short %>%  # with this data frame
mutate(ints=cut(as.numeric(.[[1]]), breaks=(0:roundup(max(df[,1]),1)))) %>% #subdivide the data by intervals and aggregate
group_by(ints) %>%
summarize(mean.K = mean(na.omit(K)),
mean.EC = mean(na.omit(EC)),
mean.ECD = mean(na.omit(ECD)),
mean.PID = mean(na.omit(PID)),
mean.FID = mean(na.omit(FID)),
max.K = max(na.omit(K)),
max.EC = max(na.omit(EC)),
max.ECD = max(na.omit(ECD)),
max.PID = max(na.omit(PID)),
max.FID = max(na.omit(FID)))  # calculate stats for each depth interval
df_short$MiHPT_ID<- MiHPT_ID  # assign the ID
df_short$max.depth=max(df$`Depth (ft)`)
if(exists("df_ALL")) df_ALL<- df_ALL else df_ALL<- df_short[FALSE,]
df_ALL<-rbind(df_short[FALSE,],df_ALL,df_short)
}
#process the top and bottom depths of the intervals
uchar<-as.character(df_ALL$ints)
split<-stringi::stri_split_regex(uchar,",",simplify=TRUE)
top<-as.numeric(gsub("[^0-9\\.]", "", split[,1]))
bottom<-as.numeric(gsub("[^0-9\\.]", "", split[,2]))
df_ALL<-cbind(df_ALL,top,bottom)
df_ALL <- df_ALL %>% mutate(top = replace(top, top > 500, 0))
df_ALL$MiHPT_ID
library(readtext)
library(dplyr)
library(tidyverse)
library(stringi)
library(stringr)
library(readxl)
setwd("./APS")
files<-list.files()
getwd()
setwd("./APS")
?swetwd
?setwd
setwd(".")
getwd()
setwd("C:/Users/tmoloney/Documents/work/AFP6/APS")
getwd()
files<-list.files()
files<-list.files()
roundup<-function (x,mult) {
y = ceiling(x/mult)*mult
return(y)
}
#file<-files[4]
for (file in files) {
df <- read_excel(file, col_types = rep("numeric", 8), sheet = "Processed Ik")
DPT_ID <- gsub("_Groundwater Profiling Log_MSTJV.xlsx", "", file)
df_short <- tibble(df[,c(3,8)]) # select the parameters of interest: depth, K, EC, ECD, PID, and FID
colnames(df_short)<-c("depth", "IK")
df_short <- df_short %>% mutate(depth = -depth)
df_short <- df_short %>% filter(!is.na(depth))
df_short <- df_short %>%
mutate(ints=cut(as.numeric(.[[1]]), breaks=(0:roundup(max(df_short$depth),1)))) %>% #subdivide the data by intervals and aggregate
group_by(ints) %>%
summarize(mean.IK = mean(na.omit(IK)))  # calculate stats for each depth interval
df_short$DPT_ID<- DPT_ID  # assign the ID
if(exists("df_ALL")) df_ALL<- df_ALL else df_ALL<- df_short[FALSE,]
df_ALL<-rbind(df_short[FALSE,],df_ALL,df_short)
}
View(df_short)
View(df_short)
df_ALL2<-df_ALL
rm(df_ALL)
#file<-files[4]
for (file in files) {
df <- read_excel(file, col_types = rep("numeric", 8), sheet = "Processed Ik")
DPT_ID <- gsub("_Groundwater Profiling Log_MSTJV.xlsx", "", file)
df_short <- tibble(df[,c(3,8)]) # select the parameters of interest: depth, K, EC, ECD, PID, and FID
colnames(df_short)<-c("depth", "IK")
df_short <- df_short %>% mutate(depth = -depth)
df_short <- df_short %>% filter(!is.na(depth))
df_short <- df_short %>%
mutate(ints=cut(as.numeric(.[[1]]), breaks=(0:roundup(max(df_short$depth),1)))) %>% #subdivide the data by intervals and aggregate
group_by(ints) %>%
summarize(mean.IK = mean(na.omit(IK)))  # calculate stats for each depth interval
df_short$DPT_ID<- DPT_ID  # assign the ID
if(exists("df_ALL")) df_ALL<- df_ALL else df_ALL<- df_short[FALSE,]
df_ALL<-rbind(df_short[FALSE,],df_ALL,df_short)
}
#process the top and bottom depths of the intervals
uchar<-as.character(df_ALL$ints)
split<-stringi::stri_split_regex(uchar,",",simplify=TRUE)
top<-as.numeric(gsub("[^0-9\\.]", "", split[,1]))
bottom<-as.numeric(gsub("[^0-9\\.]", "", split[,2]))
df_ALL<-cbind(df_ALL,top,bottom)
df_ALL <- df_ALL %>% mutate(top = replace(top, top > 500, 0))
df_ALL<- df_ALL %>% mutate(DPT_ID = paste0(DPT_ID, "A"))
df_ALL$DPT_ID
df_ALL <- df_ALL[,c(3:5,2)]
View(df_ALL)
View(df_ALL)
View(df_ALL2)
View(df_ALL2)
plot(df_ALL2)
df_ALL2
df_ALL2<-df_ALL2[,2:6]
plot(df_ALL2)
lm1<-lm(mean.K~mean.ECD, df_ALL2)
lm1
lm1$residuals
print(summary(lm1))
anova(df_ALL2)
?anova
df_ALL2
cor(df_ALL2)
round(cor(df_ALL2),
digits = 2 # rounded to 2 decimals
)
# attach(df_ALL)
# Hue<-(mean.Ch1/mean.Signal)*255+(mean.Ch2/mean.Signal)*135+(mean.Ch3/mean.Signal)*15+(mean.Ch4/mean.Signal)*-10
# Hue<-replace(Hue,Hue>255, 185)
# plot(Hue)
# df_ALL$Hue<-Hue
round(cor(na.omit(df_ALL2)),
digits = 2 # rounded to 2 decimals
)
df_ALL
df_ALL3<-df_ALL
setwd("./MiHPT")
setwd("C:/Users/tmoloney/Documents/work/AFP6/MiHPT")
setwd("C:/Users/tmoloney/Documents/work/AFP6/MiHPT")
files<-list.files()
roundup<-function (x,mult) {
y = ceiling(x/mult)*mult
return(y)
}
for (file in files) {
df <- read_excel(file, col_types = rep("numeric", 12))
MiHPT_ID <- gsub(".xlsx", "", file)
df_short <- tibble(df[,c(1,12,4:7)]) # select the parameters of interest: depth, K, EC, ECD, PID, and FID
colnames(df_short)<-c("depth", "K", "EC", "ECD", "PID", "FID")
df_short <- df_short %>%  # with this data frame
mutate(ints=cut(as.numeric(.[[1]]), breaks=(0:roundup(max(df[,1]),1)))) %>% #subdivide the data by intervals and aggregate
group_by(ints) %>%
summarize(mean.K = mean(na.omit(K)),
mean.EC = mean(na.omit(EC)),
mean.ECD = mean(na.omit(ECD)),
mean.PID = mean(na.omit(PID)),
mean.FID = mean(na.omit(FID)),
max.K = max(na.omit(K)),
max.EC = max(na.omit(EC)),
max.ECD = max(na.omit(ECD)),
max.PID = max(na.omit(PID)),
max.FID = max(na.omit(FID)))  # calculate stats for each depth interval
df_short$MiHPT_ID<- MiHPT_ID  # assign the ID
df_short$max.depth=max(df$`Depth (ft)`)
if(exists("df_ALL")) df_ALL<- df_ALL else df_ALL<- df_short[FALSE,]
df_ALL<-rbind(df_short[FALSE,],df_ALL,df_short)
}
rm(df_ALL)
setwd("C:/Users/tmoloney/Documents/work/AFP6/MiHPT")
files<-list.files()
roundup<-function (x,mult) {
y = ceiling(x/mult)*mult
return(y)
}
for (file in files) {
df <- read_excel(file, col_types = rep("numeric", 12))
MiHPT_ID <- gsub(".xlsx", "", file)
df_short <- tibble(df[,c(1,12,4:7)]) # select the parameters of interest: depth, K, EC, ECD, PID, and FID
colnames(df_short)<-c("depth", "K", "EC", "ECD", "PID", "FID")
df_short <- df_short %>%  # with this data frame
mutate(ints=cut(as.numeric(.[[1]]), breaks=(0:roundup(max(df[,1]),1)))) %>% #subdivide the data by intervals and aggregate
group_by(ints) %>%
summarize(mean.K = mean(na.omit(K)),
mean.EC = mean(na.omit(EC)),
mean.ECD = mean(na.omit(ECD)),
mean.PID = mean(na.omit(PID)),
mean.FID = mean(na.omit(FID)),
max.K = max(na.omit(K)),
max.EC = max(na.omit(EC)),
max.ECD = max(na.omit(ECD)),
max.PID = max(na.omit(PID)),
max.FID = max(na.omit(FID)))  # calculate stats for each depth interval
df_short$MiHPT_ID<- MiHPT_ID  # assign the ID
df_short$max.depth=max(df$`Depth (ft)`)
if(exists("df_ALL")) df_ALL<- df_ALL else df_ALL<- df_short[FALSE,]
df_ALL<-rbind(df_short[FALSE,],df_ALL,df_short)
}
#process the top and bottom depths of the intervals
uchar<-as.character(df_ALL$ints)
split<-stringi::stri_split_regex(uchar,",",simplify=TRUE)
top<-as.numeric(gsub("[^0-9\\.]", "", split[,1]))
bottom<-as.numeric(gsub("[^0-9\\.]", "", split[,2]))
df_ALL<-cbind(df_ALL,top,bottom)
df_ALL <- df_ALL %>% mutate(top = replace(top, top > 500, 0))
df_ALL$MiHPT_ID
View(df_ALL)
View(df_ALL)
df_ALL3
df_ALL3$DPT_ID
gsub("DPT", "", df_ALL3$DPT_ID)
gsub("DPT", "", df_ALL3$DPT_ID)
gsub("DPT", "", df_ALL3$DPT_ID)
gsub("A", "", df_ALL3$DPT_ID)
df_ALL3%>%mutate(DPT_ID=gsub("DPT", "", df_ALL3$DPT_ID))
df_ALL%>%mutate(MiHPT_ID=gsub("MIHPT-", "", df_ALL$MiHPT_ID))
View(df_ALL)
View(df_ALL)
df_ALL%>%select(12,2:6)
df_ALL3<-df_ALL3%>%mutate(DPT_ID=gsub("DPT", "", df_ALL3$DPT_ID))
df_ALL3<-df_ALL3%>%mutate(DPT_ID=gsub("A", "", df_ALL3$DPT_ID))
df_ALL<-df_ALL%>%select(12,2:6)
df_ALL<-df_ALL%>%mutate(MiHPT_ID=gsub("MIHPT-", "", df_ALL$MiHPT_ID))
View(df_ALL)
View(df_ALL)
View(df_ALL3)
View(df_ALL3)
View(df_ALL)
View(df_ALL)
for (file in files) {
df <- read_excel(file, col_types = rep("numeric", 12))
MiHPT_ID <- gsub(".xlsx", "", file)
df_short <- tibble(df[,c(1,12,4:7)]) # select the parameters of interest: depth, K, EC, ECD, PID, and FID
colnames(df_short)<-c("depth", "K", "EC", "ECD", "PID", "FID")
df_short <- df_short %>%  # with this data frame
mutate(ints=cut(as.numeric(.[[1]]), breaks=(0:roundup(max(df[,1]),1)))) %>% #subdivide the data by intervals and aggregate
group_by(ints) %>%
summarize(mean.K = mean(na.omit(K)),
mean.EC = mean(na.omit(EC)),
mean.ECD = mean(na.omit(ECD)),
mean.PID = mean(na.omit(PID)),
mean.FID = mean(na.omit(FID)),
max.K = max(na.omit(K)),
max.EC = max(na.omit(EC)),
max.ECD = max(na.omit(ECD)),
max.PID = max(na.omit(PID)),
max.FID = max(na.omit(FID)))  # calculate stats for each depth interval
df_short$MiHPT_ID<- MiHPT_ID  # assign the ID
df_short$max.depth=max(df$`Depth (ft)`)
if(exists("df_ALL")) df_ALL<- df_ALL else df_ALL<- df_short[FALSE,]
df_ALL<-rbind(df_short[FALSE,],df_ALL,df_short)
}
rm(df_ALL)
for (file in files) {
df <- read_excel(file, col_types = rep("numeric", 12))
MiHPT_ID <- gsub(".xlsx", "", file)
df_short <- tibble(df[,c(1,12,4:7)]) # select the parameters of interest: depth, K, EC, ECD, PID, and FID
colnames(df_short)<-c("depth", "K", "EC", "ECD", "PID", "FID")
df_short <- df_short %>%  # with this data frame
mutate(ints=cut(as.numeric(.[[1]]), breaks=(0:roundup(max(df[,1]),1)))) %>% #subdivide the data by intervals and aggregate
group_by(ints) %>%
summarize(mean.K = mean(na.omit(K)),
mean.EC = mean(na.omit(EC)),
mean.ECD = mean(na.omit(ECD)),
mean.PID = mean(na.omit(PID)),
mean.FID = mean(na.omit(FID)),
max.K = max(na.omit(K)),
max.EC = max(na.omit(EC)),
max.ECD = max(na.omit(ECD)),
max.PID = max(na.omit(PID)),
max.FID = max(na.omit(FID)))  # calculate stats for each depth interval
df_short$MiHPT_ID<- MiHPT_ID  # assign the ID
df_short$max.depth=max(df$`Depth (ft)`)
if(exists("df_ALL")) df_ALL<- df_ALL else df_ALL<- df_short[FALSE,]
df_ALL<-rbind(df_short[FALSE,],df_ALL,df_short)
}
#process the top and bottom depths of the intervals
uchar<-as.character(df_ALL$ints)
split<-stringi::stri_split_regex(uchar,",",simplify=TRUE)
top<-as.numeric(gsub("[^0-9\\.]", "", split[,1]))
bottom<-as.numeric(gsub("[^0-9\\.]", "", split[,2]))
df_ALL<-cbind(df_ALL,top,bottom)
df_ALL <- df_ALL %>% mutate(top = replace(top, top > 500, 0))
df_ALL$MiHPT_ID
View(df_ALL)
View(df_ALL)
df_ALL<-df_ALL%>%select(12,14,15,2:6)
df_ALL<-df_ALL%>%mutate(MiHPT_ID=gsub("MIHPT-", "", df_ALL$MiHPT_ID))
View(df_ALL)
View(df_ALL)
View(df_ALL3)
View(df_ALL3)
merged<-merge(df_ALL,df_ALL3,by=1:3)
View(merged)
View(merged)
View(merged)
View(merged)
drop<-merged%>%select(4:9)
plot(drop)
# attach(df_ALL)
# Hue<-(mean.Ch1/mean.Signal)*255+(mean.Ch2/mean.Signal)*135+(mean.Ch3/mean.Signal)*15+(mean.Ch4/mean.Signal)*-10
# Hue<-replace(Hue,Hue>255, 185)
# plot(Hue)
# df_ALL$Hue<-Hue
round(cor(na.omit(drop)),
digits = 2 # rounded to 2 decimals
)
library(corrplot)
corrplot(cor(drop),
method = "number",
type = "upper" # show only upper side
)
install.packages("corrplot")
library(corrplot)
corrplot(cor(drop),
method = "number",
type = "upper" # show only upper side
)
library(corrplot)
corrplot(cor(na.omit(drop)),
method = "number",
type = "upper" # show only upper side
)
?corrplot
corrplot(cor(na.omit(drop)),
method = "number",
type = "upper", # show only upper side
bg=grey()
)
corrplot(cor(na.omit(drop)),
method = "number",
type = "upper", # show only upper side
bg=grey
)
colors()
corrplot(cor(na.omit(drop)),
method = "number",
type = "upper", # show only upper side
bg="lightgray"
)
corrplot(cor(na.omit(drop)),
method = "number",
type = "upper", # show only upper side
bg="darkgray"
)
install.packages("Hmisc")
res <- rcorr(as.matrix(na.omit(drop))) # rcorr() accepts matrices only
# correlation tests for whole dataset
library(Hmisc)
res <- rcorr(as.matrix(na.omit(drop))) # rcorr() accepts matrices only
# display p-values (rounded to 3 decimals)
round(res$P, 3)
?corrplot2
drop%>%plot(mean.K~mean.PID)
drop%>%plot(mean.K,mean.PID)
attach(drop)
plot(mean.K,mean.PID)
plot(mean.K,mean.EC)
plot(mean.K,mean.IK)
plot(mean.ECD,mean.EC)
plot(mean.ECD,mean.PID)
plot(mean.EC,mean.PID)
plot(mean.EC,mean.FID)
plot(mean.PID,mean.FID)
plot(mean.PID,mean.IK)
plot(drop)
plot(mean.K,mean.EC)
plot(mean.K,mean.EC)
plot(mean.K,mean.EC,ylim=c(0,1000))
plot(mean.K,mean.EC,ylim=c(0,300))
plot(mean.K,mean.EC,ylim=c(0,40))
plot(mean.PID,mean.EC,ylim=c(0,40))
plot(mean.PID,mean.EC,ylim=c(0,50))
plot(mean.FID,mean.EC,ylim=c(0,50))
plot(mean.FID,mean.EC,ylim=c(0,50))
plot(mean.PID,mean.EC,ylim=c(0,50))
plot(mean.ECD,mean.EC,ylim=c(0,50))
plot(mean.IK,mean.PID)
plot(mean.IK,mean.PID, ylim =c(0,1e6))
savehistory("~/work/AFP6/MiHPT/RHistory.Rhistory")
